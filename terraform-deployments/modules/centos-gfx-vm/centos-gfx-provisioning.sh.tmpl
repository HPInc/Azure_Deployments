# Copyright (c) 2021 Teradici Corporation
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

#!/bin/bash

PCOIP_AGENT_REPO_PUBKEY_URL="https://downloads.teradici.com/rhel/teradici.pub.gpg"
PCOIP_AGENT_REPO_URL="https://downloads.teradici.com/rhel/pcoip.repo"
INST_LOG_PATH="/var/log/teradici/agent/"
INST_LOG_FILE="/var/log/teradici/agent/install.log"
DETAILED_LOG_FILE="/var/log/teradici/agent/detailed.log"

ENABLE_AUTO_SHUTDOWN=${enable_workstation_idle_shutdown}
AUTO_SHUTDOWN_IDLE_TIMER=${minutes_idle_before_shutdown}
CPU_POLLING_INTERVAL=${minutes_cpu_polling_interval}

retry() {
    local retries=0
    local max_retries=3
    until [[ $retries -ge $max_retries ]]
    do  
    # Break if command succeeds, or log then retry if command fails.
        $@ && break || {

            log "--> Failed to run command. $@"
            log "--> Retries left... $(( $max_retries - $retries ))"
            ((retries++))
            sleep 10;
        }
    done

    if [[ $retries -eq $max_retries ]]
    then
        return 1
    fi
}

log() {
    local message="$1"
    echo "[$(date)] $${message}" | tee -a "$INST_LOG_FILE"
}

get_credentials() {
    set +x
    if [[ -z "${tenant_id}" ]]; then
        log "Not getting secrets from Azure Key Vault. Exiting get_credentials..."

        PCOIP_REGISTRATION_CODE=${pcoip_registration_code}
        AD_SERVICE_ACCOUNT_PASSWORD=${ad_service_account_password}

    else
        log "Getting secrets from Azure Key Vault..."
        ACCESS_TOKEN=$(curl -X POST -d "grant_type=client_credentials&client_id=${application_id}&client_secret=${aad_client_secret}&resource=https%3A%2F%2Fvault.azure.net" https://login.microsoftonline.com/${tenant_id}/oauth2/token | jq ".access_token" -r)
        PCOIP_REGISTRATION_CODE=$(curl -X GET -H "Authorization: Bearer $ACCESS_TOKEN" -H "Content-Type: application/json" --url "${pcoip_registration_code}?api-version=2016-10-01" | jq -r '.value')
        AD_SERVICE_ACCOUNT_PASSWORD=$(curl -X GET -H "Authorization: Bearer $ACCESS_TOKEN" -H "Content-Type: application/json" --url "${ad_service_account_password}?api-version=2016-10-01" | jq -r '.value')
    fi
    set -x
}

exit_and_restart() {
    log "--> Rebooting..."
    (sleep 1; reboot -p) &
    exit
}

remove_nouveau() {
    log "--> Disabling the Nouveau kernel driver..."
    for driver in vga16fb nouveau nvidiafb rivafb rivatv; do
        echo "blacklist $driver" >> /etc/modprobe.d/blacklist.conf
    done

    sed -i 's/\(^GRUB_CMDLINE_LINUX=".*\)"/\1 rdblacklist=nouveau"/' /etc/default/grub
    grub2-mkconfig -o /boot/grub2/grub.cfg
}

install_kernel_header() {
    log "--> Installing kernel headers and development packages..."
    yum install kernel-devel kernel-headers -y
    exitCode=$?
    if [[ $exitCode -ne 0 ]]; then
        log "--> ERROR: Failed to install kernel header."
        exit 1
    fi

    yum install gcc -y
    exitCode=$?
    if [[ $exitCode -ne 0 ]]; then
        log "--> ERROR: Failed to install gcc."
        exit 1
    fi
}

# Download installation script and run to install NVIDIA driver
install_gpu_driver() {
    # the first part to check if GPU is attached
    # NVIDIA VID = 10DE
    # Display class code = 0300
    # the second part to check if the NVIDIA driver is installed
    if [[ $(lspci -d '10de:*:0300' -s '.0' | wc -l) -gt 0 ]] && ! (modprobe --resolve-alias nvidia > /dev/null 2>&1)
    then
        log "--> Installing GPU driver..."

        local nvidia_driver_filename=$(basename ${nvidia_driver_url})
        local gpu_installer="/tmp/$nvidia_driver_filename"

        log "--> Killing X server before installing driver..."
        service gdm stop

        log "--> Downloading GPU driver $nvidia_driver_filename to $gpu_installer..."
        wget --retry-connrefused --tries=3 --waitretry=5 -O "$gpu_installer" ${nvidia_driver_url}
        chmod u+x "$gpu_installer"

        log "--> Running GPU driver installer..."
        # -s, --silent Run silently; no questions are asked and no output is printed,
        # This option implies '--ui=none --no-questions'.
        # -X, --run-nvidia-xconfig
        # -Z, --disable-nouveau
        # --sanity Perform basic sanity tests on an existing NVIDIA driver installation.
        # --uninstall Uninstall the currently installed NVIDIA driver.
        # using dkms cause kernel rebuild and installation failure
        if "$gpu_installer" -s -Z -X --kernel-source-path "/usr/src/kernels/$(uname -r)"
        then
            log "--> GPU driver installed successfully."
            dracut -fv
        else
            log "--> ERROR: Failed to install GPU driver."
            exit 1
        fi
    fi
}

# Enable persistence mode
enable_persistence_mode() {
    # the first part to check if the NVIDIA driver is installed
    # the second part to check if persistence mode is enabled
    if (modprobe --resolve-alias nvidia > /dev/null 2>&1) && [[ $(nvidia-smi -q | awk '/Persistence Mode/{print $NF}') != "Enabled" ]]
    then
        log "--> Enabling persistence mode..."

        # tar -xvjf /usr/share/doc/NVIDIA_GLX-1.0/sample/nvidia-persistenced-init.tar.bz2 -C /tmp
        # chmod +x /tmp/nvidia-persistenced-init/install.sh
        # /tmp/nvidia-persistenced-init/install.sh
        # local exitCode=$?
        # rm -rf /tmp/nvidia-persistenced-init
        # if [[ $exitCode -ne 0 ]]

        # Enable persistence mode
        # based on document https://docs.nvidia.com/deploy/driver-persistence/index.html,
        # Persistence Daemon shall be used in future
        if (nvidia-smi -pm ENABLED)
        then
            log "--> Persistence mode is enabled successfully"
        else
            log "--> ERROR: Failed to enable persistence mode."
            exit 1
        fi
    fi
}

# Enable persistence mode
enable_persistence_mode() {
    # the first part to check if the NVIDIA driver is installed
    # the second part to check if persistence mode is enabled
    if (modprobe --resolve-alias nvidia > /dev/null 2>&1) && [[ $(nvidia-smi -q | awk '/Persistence Mode/{print $NF}') != "Enabled" ]]
    then
        log "--> Enabling persistence mode..."

        # tar -xvjf /usr/share/doc/NVIDIA_GLX-1.0/sample/nvidia-persistenced-init.tar.bz2 -C /tmp
        # chmod +x /tmp/nvidia-persistenced-init/install.sh
        # /tmp/nvidia-persistenced-init/install.sh
        # local exitCode=$?
        # rm -rf /tmp/nvidia-persistenced-init
        # if [[ $exitCode -ne 0 ]]

        # Enable persistence mode
        # based on document https://docs.nvidia.com/deploy/driver-persistence/index.html,
        # Persistence Daemon shall be used in future
        if (nvidia-smi -pm ENABLED)
        then
            log "--> Persistence mode is enabled successfully"
        else
            log "--> ERROR: Failed to enable persistence mode."
            exit 1
        fi
    fi
}

install_pcoip_agent() {
    if ! (rpm -q pcoip-agent-graphics)
    then
        log "--> Installing PCoIP agent..."
        # Get the Teradici pubkey
        log "--> Getting Teradici pubkey..."
        rpm --import $PCOIP_AGENT_REPO_PUBKEY_URL

        # Get PCoIP repo
        log "--> Getting Teradici PCoIP agent repo..."
        wget --retry-connrefused --tries=3 --waitretry=5 -P /etc/yum.repos.d $PCOIP_AGENT_REPO_URL

        log "--> Installing PCoIP graphics agent..."
        yum -y install pcoip-agent-graphics
        if [ $? -ne 0 ]; then
            log "--> ERROR: Failed to install PCoIP agent."
            exit 1
        fi
        log "--> PCoIP agent installed successfully."

        set +x
        if [[ "$PCOIP_REGISTRATION_CODE" ]]; then
            log "--> Registering PCoIP agent license..."

            n=0
            while true; do
                /usr/sbin/pcoip-register-host --registration-code="$PCOIP_REGISTRATION_CODE" && break
                n=$[$n+1]

                if [ $n -ge 10 ]; then
                    log "--> ERROR: Failed to register PCoIP agent after $n tries."
                    exit 1
                fi

                log "--> ERROR: Failed to register PCoIP agent. Retrying in 10s..."
                sleep 10
            done
            log "--> PCoIP agent registered successfully."

        else
            log "--> No PCoIP Registration Code provided. Skipping PCoIP agent registration..."
        fi
        set -x
    fi
}

install_idle_shutdown() {
    log "--> Installing idle shutdown..."
    mkdir /tmp/idleShutdown

    retry wget "https://raw.githubusercontent.com/teradici/deploy/master/remote-workstations/new-agent-vm/Install-Idle-Shutdown.sh" -O /tmp/idleShutdown/Install-Idle-Shutdown-raw.sh

    awk '{ sub("\r$", ""); print }' /tmp/idleShutdown/Install-Idle-Shutdown-raw.sh > /tmp/idleShutdown/Install-Idle-Shutdown.sh && chmod +x /tmp/idleShutdown/Install-Idle-Shutdown.sh

    log "--> Setting auto shutdown idle timer to $AUTO_SHUTDOWN_IDLE_TIMER minutes..."
    INSTALL_OPTS="--idle-timer $AUTO_SHUTDOWN_IDLE_TIMER"
    if [[ "$ENABLE_AUTO_SHUTDOWN" = "false" ]]; then
        INSTALL_OPTS="$INSTALL_OPTS --disabled"
    fi

    retry /tmp/idleShutdown/Install-Idle-Shutdown.sh $INSTALL_OPTS

    exitCode=$?
    if [[ $exitCode -ne 0 ]]; then
        log "--> ERROR: Failed to install idle shutdown."
        exit 1
    fi

    if [[ $CPU_POLLING_INTERVAL -ne 15 ]]; then
        log "--> Setting CPU polling interval to $CPU_POLLING_INTERVAL minutes..."
        sed -i "s/OnUnitActiveSec=15min/OnUnitActiveSec=$${CPU_POLLING_INTERVAL}min/g" /etc/systemd/system/CAMIdleShutdown.timer.d/CAMIdleShutdown.conf
        systemctl daemon-reload
    fi
}

join_domain()
{
    local dns_record_file="dns_record"
    if [[ ! -f "$dns_record_file" ]]
    then
        log "--> DOMAIN NAME: ${domain_name}"
        log "--> USERNAME: ${ad_service_account_username}"
        log "--> DOMAIN CONTROLLER: ${domain_controller_ip}"
        log "--> HOSTNAME: $HOSTNAME"

        VM_NAME=$(hostname)

        log "--> VM_NAME: $VM_NAME"

        # Wait for AD service account to be set up
        yum -y install openldap-clients
        if [ $? -ne 0 ]; then
            log "--> Failed to install openldap-clients"
            exit 1
        fi

        counter=0

        log "$_"
        log "--> Wait for AD account ${ad_service_account_username}@${domain_name} to be available"
        until ldapwhoami -H ldap://${domain_controller_ip} -D ${ad_service_account_username}@${domain_name} -w $AD_SERVICE_ACCOUNT_PASSWORD -o nettimeout=3 > /dev/null 2>&1
        do
            counter=$(($counter + 1))
            log "${ad_service_account_username}@${domain_name} not available yet, retrying in 10 seconds..."
            sleep 10
            if [ $counter -ge 360 ]; then
                log "--> Failed to join domain controller after $counter tries."
                break
            fi
        done

        # Join domain
        log "--> Install required packages to join domain"
        yum -y  install sssd realmd oddjob oddjob-mkhomedir adcli samba-common samba-common-tools krb5-workstation openldap-clients policycoreutils-python
        if [ $? -ne 0 ]; then
            log "--> Failed to install required packages to join domain"
            exit 1
        fi

        log "--> Restarting messagebus service"
        if ! (systemctl restart messagebus)
        then
            log "--> Failed to restart messagebus service"
            return 106
        fi

        log "--> Joining the domain '${domain_name}'..."
        local retries=10

        set +x
        while true
        do
            echo $AD_SERVICE_ACCOUNT_PASSWORD | realm join --user="${ad_service_account_username}@${domain_name}" "${domain_name}" --verbose >&2
            
            local rc=$?
            if [[ $rc -eq 0 ]]
            then
                log "--> Successfully joined domain '${domain_name}'."
                break
            fi

            if [ $retries -eq 0 ]
            then
                log "--> ERROR: Failed to join domain '${domain_name}'."
                return 106
            fi

            log "--> ERROR: Failed to join domain '${domain_name}'. $retries retries remaining..."
            retries=$((retries-1))
            sleep 60
        done
        set -x

        log "--> Configuring settings"
        sed -i '$ a\dyndns_update = True\ndyndns_ttl = 3600\ndyndns_refresh_interval = 43200\ndyndns_update_ptr = True\nldap_user_principal = nosuchattribute' /etc/sssd/sssd.conf
        sed -c -i "s/\\(use_fully_qualified_names *= *\\).*/\\1False/" /etc/sssd/sssd.conf
        sed -c -i "s/\\(fallback_homedir *= *\\).*/\\1\\/home\\/%u/" /etc/sssd/sssd.conf
        domainname "$VM_NAME.${domain_name}"
        echo "%${domain_name}\\\\Domain\\ Admins ALL=(ALL) ALL" > /etc/sudoers.d/sudoers

        log "--> Registering with DNS"
        DOMAIN_UPPER=$(echo "${domain_name}" | tr '[:lower:]' '[:upper:]')
        IP_ADDRESS=$(hostname -I | grep -Eo '10.([0-9]*\.){2}[0-9]*')
        set +x
        echo $AD_SERVICE_ACCOUNT_PASSWORD | kinit "${ad_service_account_username}"@"$DOMAIN_UPPER"
        set -x
        touch "$dns_record_file"
        echo "server ${domain_controller_ip}" > "$dns_record_file"
        echo "update add $VM_NAME.${domain_name} 600 a $IP_ADDRESS" >> "$dns_record_file"
        echo "send" >> "$dns_record_file"
        nsupdate -g "$dns_record_file"
    fi
}

# A flag to indicate if this is run from reboot
RE_ENTER=0

# A flag to check if a GUI is installed
IS_GUI_INSTALLED=0

if (rpm -q pcoip-agent-graphics); then
    exit
fi

if [[ ! -f "$INST_LOG_FILE" ]]
then
    mkdir -p "$(dirname $INST_LOG_FILE)"
    touch "$INST_LOG_FILE"
    chmod +644 "$INST_LOG_FILE"

    mkdir -p "$(dirname $DETAILED_LOG_FILE)"
    touch "$DETAILED_LOG_FILE"
    chmod +644 "$DETAILED_LOG_FILE"

else
    RE_ENTER=1
fi

# Print all executed commands to the terminal
set -x

# Redirect stdout and stderr to the log file
exec &>>$DETAILED_LOG_FILE

if [[ $RE_ENTER -eq 0 ]]
then
    log "Installing epel-release.."
    yum -y install epel-release

    log "Installing jq"
    yum install -y jq
    if [ $? -ne 0 ]; then
        log "Failed to install jq"
    fi

    yum install -y wget
    
    get_credentials

    log "--> Installing Linux GUI ..."
    # yum -y groupinstall "Server with GUI"
    yum -y groupinstall "GNOME Desktop" "Graphical Administration Tools"
    if [ $? -ne 0 ]; then
        log "Failed to install Linux GUI"
        IS_GUI_INSTALLED=1
    fi

    log "--> Setting default to graphical target..."
    systemctl set-default graphical.target

    join_domain

    echo '/var/lib/waagent/custom-script/download/0/script.sh' >> /etc/rc.local

    chmod +x /etc/rc.local

    remove_nouveau

    install_kernel_header

    if [ $IS_GUI_INSTALLED -eq 1 ]; then
        log "--> Retrying installation of Linux GUI ..."
        yum -y groupinstall "GNOME Desktop" "Graphical Administration Tools"

        if [ $? -ne 0 ]; then
            log "Failed to install Linux GUI on the second attempt."
            exit 1
        fi
    fi

    yum update -y --exclude=WALinuxAgent
    
    exit_and_restart

else

    install_gpu_driver

    enable_persistence_mode

    get_credentials

    install_pcoip_agent

    install_idle_shutdown

    log "--> Installation is complete!"
    
    sed -i '$ d' /etc/rc.local

    exit_and_restart
fi